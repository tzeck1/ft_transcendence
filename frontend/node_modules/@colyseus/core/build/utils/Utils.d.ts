/// <reference types="node" />
import { EventEmitter } from "events";
import { ServerOpts, Socket } from "net";
export declare const REMOTE_ROOM_SHORT_TIMEOUT: number;
export declare function generateId(length?: number): any;
export declare function registerGracefulShutdown(callback: (err?: Error) => void): void;
export declare function retry<T = any>(cb: Function, maxRetries?: number, errorWhiteList?: any[], retries?: number): Promise<T>;
export declare function spliceOne(arr: any[], index: number): boolean;
export declare class Deferred<T = any> {
    promise: Promise<T>;
    resolve: Function;
    reject: Function;
    constructor();
    then(func: (value: T) => any): any;
    catch(func: (value: any) => any): Promise<any>;
}
export declare function merge(a: any, ...objs: any[]): any;
export declare class HybridArray<T> {
    uniqueProperty: string;
    hashedArray: {
        [key: string]: T;
    };
    array: T[];
    constructor(uniquePropertyName: string, items?: T[]);
    get length(): number;
    add(item: T): void;
    at(index: number): T | undefined;
    concat(items: T[]): this;
    find<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S;
    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T;
    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];
    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
    get(key: string): T | undefined;
    includes(element: T): boolean;
    indexOf(element: T): number;
    map<U>(callback: (value: T, index: number, array: T[]) => U): U[];
    deleteAt(index: number): T;
    deleteByKey(key: string): T;
    delete(obj: T): T;
    private _badIndexWarning;
    private spliceOne;
}
export declare interface DummyServer {
    constructor(options?: ServerOpts, connectionListener?: (socket: Socket) => void): any;
    listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): this;
    close(callback?: (err?: Error) => void): this;
}
export declare class DummyServer extends EventEmitter {
}
