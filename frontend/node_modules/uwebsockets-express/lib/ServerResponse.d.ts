/// <reference types="node" />
import EventEmitter from "events";
import uWS, { RecognizedString } from "uWebSockets.js";
import { CookieOptions } from "express";
export declare class ServerResponse extends EventEmitter {
    private res;
    private req;
    private app;
    private _headers;
    private _writes;
    statusCode: number;
    headersSent: boolean;
    finished: boolean;
    aborted: boolean;
    locals: any;
    writableEnded: boolean;
    constructor(res: uWS.HttpResponse, req: any, app: any);
    render(view: string, options?: any, callback?: (err: Error, html: string) => void): void;
    end(chunk?: string, encoding?: BufferEncoding): this;
    get(name: string): string | string[];
    hasHeader(name: string): boolean;
    getHeader(name: string): void;
    setHeader(name: string, value: string | string[]): void;
    removeHeader(name: string): void;
    status(code: number): this;
    sendStatus(statusCode: number): this;
    vary(field: string): void;
    sendFile(path: string, fn?: (err: Error) => void): void;
    send(chunk?: RecognizedString): void | this;
    write(chunk: RecognizedString): this;
    type(type: string): this;
    json(body: any): void;
    jsonp(body: any): void;
    location(url: string): any;
    redirect(path: string): any;
    redirect(code: number, path: string): any;
    format(obj: any): any;
    set(name: string | object, value?: string | string[]): this;
    append(name: string, val: string | string[]): this;
    header(name: string | object, value?: string | string[]): this;
    writeHead(code: number, headers?: {
        [name: string]: string | string[];
    }): void;
    cookie(name: string, value: string | Record<string, unknown>, options: CookieOptions): this;
    clearCookie(name: string, options: Record<string, string | number>): this;
    private _implicitHeader;
}
