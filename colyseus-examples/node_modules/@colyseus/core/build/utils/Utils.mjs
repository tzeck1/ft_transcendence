import nanoid from "nanoid";
import { addExtension } from "msgpackr";
import { debugAndPrintError } from "../Debug";
import { EventEmitter } from "events";
import { logger } from "../Logger";
import { Schema } from "@colyseus/schema";
const REMOTE_ROOM_SHORT_TIMEOUT = Number(process.env.COLYSEUS_PRESENCE_SHORT_TIMEOUT || 2e3);
function generateId(length = 9) {
  return nanoid(length);
}
const signals = ["SIGINT", "SIGTERM", "SIGUSR2"];
function registerGracefulShutdown(callback) {
  process.on("uncaughtException", (err) => {
    debugAndPrintError(err);
    callback(err);
  });
  signals.forEach((signal) => process.once(signal, () => callback()));
}
function retry(cb, maxRetries = 3, errorWhiteList = [], retries = 0) {
  return new Promise((resolve, reject) => {
    cb().then(resolve).catch((e) => {
      if (errorWhiteList.indexOf(e.constructor) !== -1 && retries++ < maxRetries) {
        setTimeout(() => {
          retry(cb, maxRetries, errorWhiteList, retries).then(resolve).catch((e2) => reject(e2));
        }, Math.floor(Math.random() * Math.pow(2, retries) * 400));
      } else {
        reject(e);
      }
    });
  });
}
function spliceOne(arr, index) {
  if (index === -1 || index >= arr.length) {
    return false;
  }
  const len = arr.length - 1;
  for (let i = index; i < len; i++) {
    arr[i] = arr[i + 1];
  }
  arr.length = len;
  return true;
}
class Deferred {
  promise;
  resolve;
  reject;
  constructor() {
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
  }
  then(func) {
    return this.promise.then.apply(this.promise, arguments);
  }
  catch(func) {
    return this.promise.catch(func);
  }
}
function merge(a, ...objs) {
  for (let i = 0, len = objs.length; i < len; i++) {
    const b = objs[i];
    for (const key in b) {
      if (b.hasOwnProperty(key)) {
        a[key] = b[key];
      }
    }
  }
  return a;
}
class HybridArray {
  uniqueProperty;
  hashedArray = {};
  array = [];
  constructor(uniquePropertyName, items) {
    this.uniqueProperty = uniquePropertyName;
    if (items) {
      this.array = this.array.concat(items);
      for (const element of items) {
        this.hashedArray[element[this.uniqueProperty]] = element;
      }
    }
  }
  get length() {
    return this.array.length;
  }
  add(item) {
    if (!this.hashedArray[item[this.uniqueProperty]]) {
      this.array.push(item);
      this.hashedArray[item[this.uniqueProperty]] = item;
    } else {
      logger.warn(`.add(): element already exists:`, item[this.uniqueProperty]);
    }
  }
  at(index) {
    if (index >= this.array.length) {
      this._badIndexWarning(index);
    } else {
      return this.array[index];
    }
  }
  concat(items) {
    if (items) {
      for (const item of items) {
        this.hashedArray[item[this.uniqueProperty]] = item;
      }
      this.array.concat(items);
    }
    return this;
  }
  find(predicate, thisArg) {
    return this.array.find(predicate, thisArg);
  }
  filter(predicate, thisArg) {
    return this.array.filter(predicate, thisArg);
  }
  forEach(callbackfn, thisArg) {
    Array.prototype.forEach.call(this.array, callbackfn);
  }
  get(key) {
    return this.hashedArray[key];
  }
  includes(element) {
    return this.hashedArray[element[this.uniqueProperty]] !== void 0;
  }
  indexOf(element) {
    return this.array.indexOf(element);
  }
  map(callback) {
    const result = [];
    for (let index = 0; index < this.array.length; index++) {
      result.push(callback(this.array[index], index, this.array));
    }
    return result;
  }
  deleteAt(index) {
    if (index >= this.array.length) {
      this._badIndexWarning(index);
      return void 0;
    } else {
      const removable = this.spliceOne(index);
      delete this.hashedArray[removable[this.uniqueProperty]];
      return removable;
    }
  }
  deleteByKey(key) {
    if (!this.hashedArray[key]) {
      logger.error(`deleteByKey(): no such element for '${key}'.`);
      return void 0;
    } else {
      const removable = this.spliceOne(this.indexOf(this.hashedArray[key]));
      delete this.hashedArray[key];
      return removable;
    }
  }
  delete(obj) {
    if (this.hashedArray[obj[this.uniqueProperty]]) {
      return this.deleteByKey(obj[this.uniqueProperty]);
    } else if (this.indexOf(obj) != -1) {
      return this.deleteAt(this.indexOf(obj));
    } else {
      return void 0;
    }
  }
  _badIndexWarning(index) {
    logger.warn(`Index out of range, index: ${index}`);
  }
  spliceOne(index) {
    if (index === -1 || index >= this.array.length) {
      this._badIndexWarning(index);
      return void 0;
    }
    const itemRemoved = this.array[index];
    const len = this.array.length - 1;
    for (let i = index; i < len; i++) {
      this.array[i] = this.array[i + 1];
    }
    this.array.length = len;
    return itemRemoved;
  }
}
class DummyServer extends EventEmitter {
}
addExtension({
  Class: Schema,
  type: 0,
  read(datum) {
    return datum;
  },
  write(instance) {
    return instance.toJSON();
  }
});
export {
  Deferred,
  DummyServer,
  HybridArray,
  REMOTE_ROOM_SHORT_TIMEOUT,
  generateId,
  merge,
  registerGracefulShutdown,
  retry,
  spliceOne
};
