"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "string",
    "number": "number",
    "boolean": "boolean",
    "int8": "number",
    "uint8": "number",
    "int16": "number",
    "uint16": "number",
    "int32": "number",
    "uint32": "number",
    "int64": "number",
    "uint64": "number",
    "float32": "number",
    "float64": "number",
};
var distinct = function (value, index, self) { return self.indexOf(value) === index; };
function generate(context, options) {
    return __spreadArray(__spreadArray([], __read(context.classes.map(function (structure) { return ({
        name: structure.name + ".ts",
        content: generateClass(structure, options.namespace, context.classes)
    }); })), false), __read(context.interfaces.map(function (structure) { return ({
        name: structure.name + ".ts",
        content: generateInterface(structure, options.namespace, context.classes),
    }); })), false);
}
exports.generate = generate;
function generateClass(klass, namespace, allClasses) {
    var allRefs = [];
    klass.properties.forEach(function (property) {
        var type = property.type;
        // keep all refs list
        if ((type === "ref" || type === "array" || type === "map" || type === "set")) {
            allRefs.push(property);
        }
    });
    return "".concat((0, types_1.getCommentHeader)(), "\n\nimport { Schema, type, ArraySchema, MapSchema, SetSchema, DataChange } from '@colyseus/schema';\n").concat(allRefs.
        filter(function (ref) { return ref.childType && typeMaps[ref.childType] === undefined; }).
        map(function (ref) { return ref.childType; }).
        concat((0, types_1.getInheritanceTree)(klass, allClasses, false).map(function (klass) { return klass.name; })).
        filter(distinct).
        map(function (childType) { return "import { ".concat(childType, " } from './").concat(childType, "'"); }).
        join("\n"), "\n\nexport class ").concat(klass.name, " extends ").concat(klass.extends, " {\n").concat(klass.properties.map(function (prop) { return "    ".concat(generateProperty(prop)); }).join("\n"), "\n}\n");
}
function generateProperty(prop) {
    var langType;
    var initializer = "";
    var typeArgs;
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (isUpcaseFirst) {
            typeArgs += ", ".concat(prop.childType);
        }
        else {
            typeArgs += ", \"".concat(prop.childType, "\"");
        }
        if (prop.type === "ref") {
            langType = "".concat(prop.childType);
            initializer = "new ".concat(prop.childType, "()");
            typeArgs = "".concat(prop.childType);
        }
        else if (prop.type === "array") {
            langType = (isUpcaseFirst)
                ? "ArraySchema<".concat(prop.childType, ">")
                : "ArraySchema<".concat(typeMaps[prop.childType], ">");
            initializer = "new ".concat(langType, "()");
            typeArgs = (isUpcaseFirst)
                ? "[ ".concat(prop.childType, " ]")
                : "[ \"".concat(prop.childType, "\" ]");
        }
        else if (prop.type === "map") {
            langType = (isUpcaseFirst)
                ? "MapSchema<".concat(prop.childType, ">")
                : "MapSchema<".concat(typeMaps[prop.childType], ">");
            initializer = "new ".concat(langType, "()");
            typeArgs = (isUpcaseFirst)
                ? "{ map: ".concat(prop.childType, " }")
                : "{ map: \"".concat(prop.childType, "\" }");
        }
        else if (prop.type === "set") {
            langType = (isUpcaseFirst)
                ? "SetSchema<".concat(prop.childType, ">")
                : "SetSchema<".concat(typeMaps[prop.childType], ">");
            initializer = "new ".concat(langType, "()");
            typeArgs = (isUpcaseFirst)
                ? "{ set: ".concat(prop.childType, " }")
                : "{ set: \"".concat(prop.childType, "\" }");
        }
    }
    else {
        langType = typeMaps[prop.type];
        typeArgs = "\"".concat(prop.type, "\"");
    }
    // TS1263: "Declarations with initializers cannot also have definite assignment assertions"
    var definiteAssertion = initializer ? "" : "!";
    return "@type(".concat(typeArgs, ") public ").concat(prop.name).concat(definiteAssertion, ": ").concat(langType).concat((initializer) ? " = ".concat(initializer) : "", ";");
}
function generateInterface(structure, namespace, allClasses) {
    return "".concat((0, types_1.getCommentHeader)(), "\n\nexport interface ").concat(structure.name, " {\n").concat(structure.properties.map(function (prop) { return "    ".concat(prop.name, ": ").concat(prop.type, ";"); }).join("\n"), "\n}\n");
}
//# sourceMappingURL=ts.js.map