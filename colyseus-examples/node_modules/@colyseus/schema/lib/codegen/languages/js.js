"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "string",
    "number": "number",
    "boolean": "boolean",
    "int8": "number",
    "uint8": "number",
    "int16": "number",
    "uint16": "number",
    "int32": "number",
    "uint32": "number",
    "int64": "number",
    "uint64": "number",
    "float32": "number",
    "float64": "number",
};
var distinct = function (value, index, self) { return self.indexOf(value) === index; };
function generate(context, options) {
    return context.classes.map(function (klass) { return ({
        name: klass.name + ".js",
        content: generateClass(klass, options.namespace, context.classes)
    }); });
}
exports.generate = generate;
function generateClass(klass, namespace, allClasses) {
    var allRefs = [];
    klass.properties.forEach(function (property) {
        var type = property.type;
        // keep all refs list
        if ((type === "ref" || type === "array" || type === "map")) {
            allRefs.push(property);
        }
    });
    return "".concat((0, types_1.getCommentHeader)(), "\n\nconst schema = require(\"@colyseus/schema\");\nconst Schema = schema.Schema;\nconst type = schema.type;\n").concat(allRefs.
        filter(function (ref) { return ref.childType && typeMaps[ref.childType] === undefined; }).
        map(function (ref) { return ref.childType; }).
        concat((0, types_1.getInheritanceTree)(klass, allClasses, false).map(function (klass) { return klass.name; })).
        filter(distinct).
        map(function (childType) { return "const ".concat(childType, " = require(\"./").concat(childType, "\");"); }).
        join("\n"), "\n\nclass ").concat(klass.name, " extends ").concat(klass.extends, " {\n    constructor () {\n        super();\n").concat(klass.properties.
        filter(function (prop) { return prop.childType !== undefined; }).
        map(function (prop) { return "        " + generatePropertyInitializer(prop); }).join("\n"), "\n    }\n}\n").concat(klass.properties.map(function (prop) { return generatePropertyDeclaration(klass.name, prop); }).join("\n"), "\n\nexport default ").concat(klass.name, ";\n");
}
function generatePropertyDeclaration(className, prop) {
    var typeArgs;
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (isUpcaseFirst) {
            typeArgs += ", ".concat(prop.childType);
        }
        else {
            typeArgs += ", \"".concat(prop.childType, "\"");
        }
        if (prop.type === "ref") {
            typeArgs = "".concat(prop.childType);
        }
        else if (prop.type === "array") {
            typeArgs = (isUpcaseFirst)
                ? "[ ".concat(prop.childType, " ]")
                : "[ \"".concat(prop.childType, "\" ]");
        }
        else if (prop.type === "map") {
            typeArgs = (isUpcaseFirst)
                ? "{ map: ".concat(prop.childType, " }")
                : "{ map: \"".concat(prop.childType, "\" }");
        }
    }
    else {
        typeArgs = "\"".concat(prop.type, "\"");
    }
    return "type(".concat(typeArgs, ")(").concat(className, ".prototype, \"").concat(prop.name, "\");");
}
function generatePropertyInitializer(prop) {
    var initializer = "";
    if (prop.type === "ref") {
        initializer = "new ".concat(prop.childType, "()");
    }
    else if (prop.type === "array") {
        initializer = "new schema.ArraySchema()";
    }
    else if (prop.type === "map") {
        initializer = "new schema.MapSchema()";
    }
    return "this.".concat(prop.name, " = ").concat(initializer);
}
//# sourceMappingURL=js.js.map