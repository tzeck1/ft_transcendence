/// <reference types="qs" />
/// <reference types="node" />
import uWS from "uWebSockets.js";
import EventEmitter from "events";
import express, { NextFunction } from "express";
import { IncomingMessage } from "./IncomingMessage";
import { ServerResponse } from "./ServerResponse";
declare type RequestHandler = (req: IncomingMessage, res: ServerResponse, next?: NextFunction) => void;
export declare type RenderCallback = (e: any, rendered?: string) => void;
declare type EngineCallback = (path: string, options: object, callback: RenderCallback) => void;
export declare class Application extends EventEmitter {
    protected uWSApp: uWS.TemplatedApp;
    protected listeningSocket: any;
    protected request: express.Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
    protected response: express.Response<any, Record<string, any>>;
    private _router;
    constructor(uWSApp: uWS.TemplatedApp);
    protected init(): void;
    protected handle(req: any, res: any, callback?: any): void;
    protected lazyrouter(): void;
    engine(ext: string, fn: EngineCallback): void;
    set(setting: any, val: any): any;
    enable(setting: string): any;
    enabled(setting: string): any;
    render(name: string, options: any, callback: RenderCallback): any;
    use(handler: RequestHandler): any;
    use(path: string, handler: RequestHandler): any;
    use(path: string, router: express.Router): any;
    use(path: string, ...handlers: Array<express.Router | RequestHandler>): any;
    use(path: string, any: any): any;
    use(any: any): any;
    get(path: string, ...handlers: RequestHandler[]): any;
    post(path: string, ...handlers: RequestHandler[]): this;
    patch(path: string, ...handlers: RequestHandler[]): this;
    options(path: string, ...handlers: RequestHandler[]): this;
    put(path: string, ...handlers: RequestHandler[]): this;
    /**
     * @deprecated
     */
    del(path: string, ...handlers: RequestHandler[]): any;
    delete(path: string, ...handlers: RequestHandler[]): this;
    head(path: string, ...handlers: RequestHandler[]): this;
    all(path: string, ...handlers: RequestHandler[]): this;
    listen(port?: number, cb?: () => void): {
        close(): void;
    };
    protected defaultConfiguration(): void;
}
export {};
