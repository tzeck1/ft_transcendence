"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const uWebSockets_js_1 = __importDefault(require("uWebSockets.js"));
const events_1 = __importDefault(require("events"));
const express_1 = __importStar(require("express"));
// import pathToRegexp from "path-to-regexp";
const IncomingMessage_1 = require("./IncomingMessage");
const ServerResponse_1 = require("./ServerResponse");
function getUrlParameters(url) {
    return (url.match(/:([a-zA-Z0-9\_]+)/gi) || []).map((param) => param.substr(1));
}
function onAbort(req, res) {
    req.socket.readable = false;
    res.finished = true;
    res.aborted = true;
}
// const rootRegexpPath = pathToRegexp("/", [], { end: false, strict: false });
class Application extends events_1.default {
    constructor(uWSApp) {
        super();
        this.uWSApp = uWSApp;
        // middlewares: MiddlewareList = [];
        // engines: {[ext: string]: EngineCallback} = {};
        // settings: {[setting: string]: any} = {};
        // cache: {[id: string]: any} = {};
        this.listeningSocket = undefined;
        this.request = express_1.default.request;
        this.response = express_1.default.response;
        // Alias app.delete() = app.del()
        uWSApp['delete'] = uWSApp['del'];
        this.init();
    }
    init() {
        // perform original express initialization
        express_1.application.init.apply(this, arguments);
        this.uWSApp.any("/*", (uwsResponse, uwsRequest) => __awaiter(this, void 0, void 0, function* () {
            const url = uwsRequest.getUrl();
            const req = new IncomingMessage_1.IncomingMessage(uwsRequest, uwsResponse, [], this);
            const res = new ServerResponse_1.ServerResponse(uwsResponse, req, this);
            uwsResponse.onAborted(onAbort.bind(undefined, req, res));
            // read body data!
            if (req.headers['content-length']) {
                try {
                    yield req['readBody']();
                }
                catch (e) {
                    console.warn("uWebSockets-express: failed reading request body at", url);
                }
            }
            this.handle(req, res);
        }));
    }
    handle(req, res, callback) {
        express_1.default.application.handle.call(this, req, res, callback);
    }
    lazyrouter() {
        // DISCARDED: original lazyrouter auto-initializes "expressInit", which
        // overrides the prototype of request/response, which we can't let happen
        // (express.application as any).lazyrouter.apply(this, arguments);
        if (!this._router) {
            this._router = express_1.default.Router({
                caseSensitive: this.enabled('case sensitive routing'),
                strict: this.enabled('strict routing')
            });
            this._router.use(express_1.default.query(this.get('query parser fn')));
            const app = this;
            this._router.use(function expressInit(req, res, next) {
                if (app.enabled('x-powered-by'))
                    res.setHeader('X-Powered-By', 'Express');
                req.res = res;
                res.req = req;
                req.next = next;
                // setPrototypeOf(req, app.request)
                // setPrototypeOf(res, app.response)
                res.locals = res.locals || Object.create(null);
                next();
            });
        }
        return;
    }
    engine(ext, fn) {
        express_1.application.engine.apply(this, arguments);
    }
    set(setting, val) {
        return express_1.application.set.apply(this, arguments);
    }
    enable(setting) {
        return express_1.application.enable.call(this, setting);
    }
    enabled(setting) {
        return express_1.application.enabled.call(this, setting);
    }
    render(name, options, callback) {
        return express_1.application.render.apply(this, arguments);
    }
    use(pathOrHandler, ...handlersOrRouters) {
        express_1.default.application.use.apply(this, arguments);
        return this;
    }
    get(path, ...handlers) {
        return express_1.default.application.get.apply(this, arguments);
    }
    post(path, ...handlers) {
        express_1.default.application.post.apply(this, arguments);
        return this;
    }
    patch(path, ...handlers) {
        express_1.default.application.patch.apply(this, arguments);
        return this;
    }
    options(path, ...handlers) {
        express_1.default.application.options.apply(this, arguments);
        return this;
    }
    put(path, ...handlers) {
        express_1.default.application.put.apply(this, arguments);
        return this;
    }
    /**
     * @deprecated
     */
    del(path, ...handlers) {
        return this.delete.apply(this, arguments);
    }
    delete(path, ...handlers) {
        express_1.default.application.delete.apply(this, arguments);
        return this;
    }
    head(path, ...handlers) {
        express_1.default.application.head.apply(this, arguments);
        return this;
    }
    all(path, ...handlers) {
        express_1.default.application.all.apply(this, arguments);
        return this;
    }
    listen(port, cb) {
        this.uWSApp.listen(port, (listenSocket) => {
            this.listeningSocket = listenSocket;
            cb === null || cb === void 0 ? void 0 : cb();
        });
        const self = this;
        return {
            close() {
                uWebSockets_js_1.default.us_listen_socket_close(self.listeningSocket);
                self.listeningSocket = null;
            }
        };
    }
    defaultConfiguration() {
        express_1.application.defaultConfiguration.apply(this);
    }
}
exports.Application = Application;
//# sourceMappingURL=Application.js.map